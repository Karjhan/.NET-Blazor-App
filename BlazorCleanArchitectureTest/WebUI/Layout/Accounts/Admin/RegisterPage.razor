@attribute [Route(UIConstants.RegisterPageRoute)]
@using Application.Responses.Accounts
@using WebUI.Constants
<div class="row">
   <div class="col-lg-4">
        
   </div>
   <div class="col-lg-4">
      <EditForm Model="RegisterModel" OnValidSubmit="RegisterAsync">
         <div class="card border-primary shadow-lg text-dark p-5" style="opacity: 0.8; margin-top: 30%; min-width: 350px; border-radius: 24px">
            <div class="card-header text-dark fs-4 border-primary">
               Add User
            </div>
            <div class="card-body" style="opacity: 1;">
               <DataAnnotationsValidator/>
               <FloatingText class="form-control mb-3" Label="Full Name" Placeholder="John Doe" @bind-Value="RegisterModel.Name">
                                             
               </FloatingText>
               <FloatingText class="form-control mb-3" Label="Email Address" Placeholder="JohnDoe@email.com" @bind-Value="RegisterModel.EmailAddress">
                        
               </FloatingText>
               <label class="form-label">
                  Select Role
               </label>
               <InputSelect TValue="string" @bind-value="RegisterModel.Role" class="form-select mb-3" ValueExpression="() => RegisterModel.Role">
                  <option>
                     Select Role
                  </option>
                  @foreach (var role in AvailableRoles!)
                  {
                     <option value="@role.Name">
                        @role.Name
                     </option>
                  }
               </InputSelect>
               <FloatingText class="form-control" Label="User Password" Type="@PasswordType" @bind-Value="RegisterModel.Password">
                     
               </FloatingText>
               <FloatingText class="form-control" Label="Confirm Password" Type="@PasswordType" @bind-Value="RegisterModel.ConfirmPassword">
                                          
               </FloatingText>
               <a class="btn btn-link text-decoration-none float-end" style="margin-top: -20px" @onclick="ChangePasswordType">
                  <small>@DisplayText</small>
               </a>
               <div class="form-group align-content-end d-flex justify-content-center w-100">
                  <button class="btn btn-success w-100" type="submit">
                     Create Account
                  </button>
               </div>      
               <hr class="text-primary"/>
            </div>
                  
            <div class="card-footer mt-5">
               <ValidationSummary class="form-control text-danger text-decoration-none p-4" style="list-style: lower-latin; text-align: left"></ValidationSummary>
            </div>
         </div> 
      </EditForm>    
   </div>
    <div class="col-lg-4">
            
    </div>
</div>
<Modal @bind-Open="IsOpen" Actions="ButtonActions" BootstrapClass=@BorderClass CustomStyle="min-width:250px; max-width:300px;">
   <ContentContent>
      <span class="text-center text-muted">
         <div class="card border-@BorderClass">
            <div class="card-header">Information</div>
            <div class="card-body text-muted">@Message</div>
         </div>
      </span>
   </ContentContent>
   
   <ButtonTemplate>
      <div class="d-flex justify-content-center align-content-center">
         <button class="@ButtonClass btn-sm" value="ok" style="margin-right: 5px">Okay</button>
      </div>
   </ButtonTemplate>
</Modal>

@code {
   public bool IsOpen { get; set; }
   public string? SelectedAction { get; set; }
   string? Message;
   public bool IsOperationSuccess { get; set; } = false;
   string? BorderClass = "border-success rounded p-2 ml-2 mr-2";
   string? ButtonClass = "btn btn-success";
   private CreateAccountRequest RegisterModel { get; set; } = new CreateAccountRequest();
   private IEnumerable<GetRoleResponse>? AvailableRoles { get; set; } = new List<GetRoleResponse>();

   protected override async Task OnInitializedAsync()
   {
      AvailableRoles = (await accountService.GetRolesAsync()).Value;
   }

   private async Task RegisterAsync()
   {
      try
      {
         ResetButtons();
         var response = await accountService.CreateAccountAsync(RegisterModel);
         if (response.IsSuccess)
         {
            IsOperationSuccess = true;
            SuccessBorderAndButton();
            Message = UIConstants.SuccessfulRegister;
            IsOpen = true;
         }
         else
         {
            IsOperationSuccess = false;
            DangerBorderAndButtons();
            Message = response.Error.Description;
            IsOpen = true;
         }
      }
      catch (Exception e)
      {
         DangerBorderAndButtons();
         Message = "Sorry, unknown error occured!";
         IsOpen = true;
      }
   }
   
   private string? PasswordType = "password";
   private bool PasswordState = true;
   private string DisplayText = "Show";

   void ChangePasswordType()
   {
      PasswordState = !PasswordState;
      if (!PasswordState)
      {
         PasswordType = "text";
         DisplayText = "Hide";
      }else
      {
         PasswordType = "password";
         DisplayText = "Show";
      }
   }

   void DangerBorderAndButtons()
   {
      BorderClass = "border-danger rounded p-2 ml-2 mr-2";
      ButtonClass = "btn btn-danger";
   }

   void SuccessBorderAndButton()
   {
      BorderClass = "border-success rounded p-2 ml-2 mr-2";
      ButtonClass = "btn btn-success";
   }

   void ResetButtons()
   {
      BorderClass = "border-success rounded p-2 ml-2 mr-2";
      ButtonClass = "btn btn-success";
   }

   void ButtonActions(string action)
   {
      SelectedAction = action;
      if (action == "ok")
      {
         IsOpen = false;
         if (IsOperationSuccess)
         {
            RegisterModel = new CreateAccountRequest();
         }
      }
   }
}