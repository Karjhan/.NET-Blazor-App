@attribute [Route(UIConstants.UsersPageRoute)]
@using NetcodeHub.Packages.Components.DataGrid
@using NetcodeHub.Packages.Components.Toast
@using WebUI.Constants
@using Application.Responses.Accounts
@inject ToastService toastService
<div class="row">
    <div class="col-lg-12 col-md-12 col-sm-12">
        <div class="card border-1 shadow-lg">
            <div class="card-header fw-bold text-info fs-2">
                Available Users
            </div>
            <div class="card-body">
                @if (Users != null)
                {
                    <NetcodeHubDataGrid
                        HeaderColor="@Color.Dark()"
                        HeaderFont="@Font.TimesNewRoman()"
                        HeaderSize="@Size.Large()"
                        ContentFont="@Font.Cambria()"
                        DataGridFormat="@DataGridFormat.StripedSuccessColumns()"
                        CustomStyle="padding: 10px"
                    >
                        <HeaderTemplate>
                            <th>@UserTableConstants.NameColumnTitle</th>
                            <th>@UserTableConstants.EmailColumnTitle</th>
                            <th>@UserTableConstants.ChangeRoleColumnTitle</th>
                        </HeaderTemplate>
                        <ContentTemplate>
                            @foreach (var user in Users)
                            {
                                <tr>
                                    <td>@user.Name</td>
                                    <td>@user.Email</td>
                                    <td>
                                        @if (DefaultRoles != null)
                                        {
                                            string roleName = user.RoleName!;
                                            string selectedRole = "";
                                            <select class="form-select" @onchange="HandleSelectionChange">
                                                <option selected="selected" value="@($"{roleName}_{user.Email}")">
                                                    @roleName
                                                </option>
                                                @foreach (var role in DefaultRoles)
                                                {
                                                    selectedRole = role.Name;
                                                    if (role.Name != roleName)
                                                    {
                                                        <option value="@($"{role.Name}_{user.Email}")">
                                                            @role.Name
                                                        </option>
                                                    }
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            <em>
                                                @UserTableConstants.LoadingRolesMessage
                                            </em>
                                        }
                                    </td>
                                </tr>
                            }
                        </ContentTemplate>
                    </NetcodeHubDataGrid>
                }
                else
                {
                    <em class="text-success text-center fw-bold shadow-lg border-1">
                        @UserTableConstants.LoadingUsersMessage
                    </em>
                }
            </div>
        </div>
    </div>
</div>

<Toast @ref="toastService.ToastComponent" IconClass="bi bi-check" Persist="true" Duration=2000>
    
</Toast>

@code {
    [CascadingParameter] 
    public Task<AuthenticationState>? ClientAuthState { get; set; }

    private IEnumerable<GetAccountWithRoleResponse>? Users { get; set; } = new List<GetAccountWithRoleResponse>();
    private IEnumerable<GetRoleResponse>? DefaultRoles { get; set; } = new List<GetRoleResponse>();
    ClaimsPrincipal? User;

    private async Task GetUsersWithRoles()
    {
        var result = (await accountService.GetAccountsWithRolesAsync()).Value.ToList();
        result.Remove(result.FirstOrDefault(user => user.Email == User!.Identity!.Name)!);
        Users = result;
    }

    private async Task GetDefaultRoles()
    {
        DefaultRoles = (await accountService.GetRolesAsync()).Value;
    }

    private async Task GetAdminInfo()
    {
        User = (await ClientAuthState!).User;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetAdminInfo();
            await GetUsersWithRoles();
            await GetDefaultRoles();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }
    
    [Parameter]
    public EventCallback<(string, string?)> SelectionChanged { get; set; }

    private async Task HandleSelectionChange(ChangeEventArgs args)
    {
        string roleName = args.Value.ToString()!.Split("_")[0];
        string email =  args.Value.ToString()!.Split("_")[1];
        var result = await accountService.ChangeUserRoleAsync(new UpdateRoleRequest() { RoleName = roleName, UserEmail = email });
        if (result.IsSuccess)
        {
            toastService.ShowSuccessToast("Info!", UIConstants.ChangeRoleSuccessfully);
        }
        else
        {
            toastService.ShowErrorToast("Alert", result.Error.Description);
        }
    }
}