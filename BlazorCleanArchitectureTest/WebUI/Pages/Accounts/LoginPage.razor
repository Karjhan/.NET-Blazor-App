@attribute [Route(UIConstants.LoginPageRoute)]
@using WebUI.Layout.Accounts.Identity
@using WebUI.Constants
@using Application.Adapters
@inject IConfiguration configuration
@inject ILocalStorageAdapter localStorageAdapter

@layout AuthenticationLayout

<EditForm Model="LoginModel" OnValidSubmit="LoginAsync">
   <div class="card border-primary shadow-lg text-dark p-5" style="opacity: 0.8; margin-top: 30%; min-width: 350px; border-radius: 24px">
      <div class="card-header text-dark fs-4 border-primary">
         Login
      </div>
      <div class="card-body" style="opacity: 1;">
         <DataAnnotationsValidator/>
         <FloatingText class="form-control mb-3" Label="Email Address" Placeholder="JohnDoe@email.com" @bind-Value="LoginModel.EmailAddress">
            
         </FloatingText>
         <FloatingText class="form-control" Label="User Password" Type="@PasswordType" @bind-Value="LoginModel.Password">
         
         </FloatingText>
         <a class="btn btn-link text-decoration-none float-end" style="margin-top: -20px" @onclick="ChangePasswordType">
            <small>@DisplayText</small>
         </a>
         <div class="form-group align-content-end d-flex justify-content-center w-100">
            <button class="btn btn-success w-100" type="submit">
               Login
            </button>
         </div>
         <hr class="text-primary"/>
         <div class="d-flex justify-content-center w-100">
            @if (ThirdPartyRedirectUrl is not null || ThirdPartyRedirectUrl != "javascript:void(0)")
            {
               <a class="btn btn-link text-decoration-none float-end" href="@ThirdPartyRedirectUrl" target="_blank">
                  <img src="duende-logo.svg" class="icon-banner" alt="duende icon" style="width: 32px;"/> Login with Duende
               </a>
            }
            else
            {
                <p>Loading...</p>
            }
         </div>
      </div>
      
      <div class="card-footer mt-5">
         <ValidationSummary class="form-control text-danger text-decoration-none p-4" style="list-style: lower-latin; text-align: left"></ValidationSummary>
      </div>
   </div> 
</EditForm>
<Modal @bind-Open="IsOpen" Actions="ButtonActions" BootstrapClass=@BorderClass CustomStyle="min-width:250px; max-width:300px;">
   <ContentContent>
      <span class="text-center text-muted">
         <div class="card border-@BorderClass">
            <div class="card-header">Information</div>
            <div class="card-body text-muted">@Message</div>
         </div>
      </span>
   </ContentContent>
   
   <ButtonTemplate>
      <div class="d-flex justify-content-center align-content-center">
         <button class="@ButtonClass btn-sm" value="ok" style="margin-right: 5px">Okay</button>
      </div>
   </ButtonTemplate>
</Modal>

@code{
   public bool IsOpen { get; set; }
   public string? SelectedAction { get; set; }
   string? Message;
   string? BorderClass = "border-success rounded p-2 ml-2 mr-2";
   string? ButtonClass = "btn btn-success";
   private LoginAccountRequest LoginModel { get; set; } = new LoginAccountRequest();
   private string? ThirdPartyRedirectUrl = null;

   private async Task LoginAsync()
   {
      try
      {
         ResetButtons();
         var response = await accountService.LoginAccountAsync(LoginModel);
         if (response.IsSuccess)
         {
            var value = response.Value;
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new LocalStorageDTO()
            {
               AccessToken = value.Token,
               RefreshToken = value.RefreshToken
            });
            NavManager.NavigateTo("content/home", true);
         }
         else
         {
            DangerBorderAndButtons();
            Message = response.Error.Description;
            IsOpen = true;
         }
      }
      catch (Exception e)
      {
         DangerBorderAndButtons();
         Message = "Sorry, unknown error occured!";
         IsOpen = true;
      }
   }

   private async Task<string> BuildThirdPartyRedirect()
   {
      var thirdPartyBaseUrl = configuration["DefaultThirdPartyUrl"];
      var clientIdForThirdParty = configuration["ThirdPartyClientId"];
      var clientSecretForThirdParty = configuration["ThirdPartyClientSecret"];
      var redirectBaseUri = configuration["BaseAddress"];
      var codeVerifier = IdentityUtilities.GenerateCodeVerifier();
      var codeChallenge = IdentityUtilities.GenerateCodeChallenge(codeVerifier);
      var scopes = string.Join("%20", ["openid", "profile", "blazorApp"]);

      var failCondition =
         string.IsNullOrEmpty(thirdPartyBaseUrl) ||
         string.IsNullOrEmpty(clientIdForThirdParty) ||
         string.IsNullOrEmpty(clientSecretForThirdParty) ||
         string.IsNullOrEmpty(redirectBaseUri) ||
         string.IsNullOrEmpty(codeVerifier) ||
         string.IsNullOrEmpty(codeChallenge) ||
         string.IsNullOrEmpty(scopes);

      if (failCondition)
      {
         return "javascript:void(0)";
      }

      await localStorageAdapter.SetCodeVerifierInLocalStorage(codeVerifier);
      
      return $"{thirdPartyBaseUrl}connect/authorize?client_id={clientIdForThirdParty}&client_secret={clientSecretForThirdParty}&response_type=code&scope={scopes}&redirect_uri={redirectBaseUri}{UIConstants.ExternalAuthRedirectRoute}&code_challenge={codeChallenge}&code_challenge_method=S256";
   }

   private string? PasswordType = "password";
   private bool PasswordState = true;
   private string DisplayText = "Show";

   void ChangePasswordType()
   {
      PasswordState = !PasswordState;
      if (!PasswordState)
      {
         PasswordType = "text";
         DisplayText = "Hide";
      }else
      {
         PasswordType = "password";
         DisplayText = "Show";
      }
   }
   
   [CascadingParameter] 
    public Task<AuthenticationState>? ClientAuthState { get; set; }

   protected override async Task OnInitializedAsync()
   {
      try
      {
         ThirdPartyRedirectUrl = await BuildThirdPartyRedirect();
         
         if ((await ClientAuthState!).User.Identity!.IsAuthenticated)
         {
            NavManager.NavigateTo("content/home", false, true);
         }
      }
      catch (Exception e)
      {
         // ignored
      }
   }

   void DangerBorderAndButtons()
   {
      BorderClass = "border-danger rounded p-2 ml-2 mr-2";
      ButtonClass = "btn btn-danger";
   }

   void ResetButtons()
   {
      BorderClass = "border-success rounded p-2 ml-2 mr-2";
      ButtonClass = "btn btn-success";
   }

   void ButtonActions(string action)
   {
      SelectedAction = action;
      if (action == "ok")
      {
         IsOpen = false;
      }
   }
}